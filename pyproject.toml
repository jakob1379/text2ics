[project]
name = "text2ics"
version = "0.1.3"
description = "A Python tool to convert unstructured text into an ICS calendar file using an LLM."
readme = "README.md"
authors = [
    { name = "Jakob Stender Guldberg", email = "jakob1379@gmail.com" }
]
license = { text = "MIT" }
requires-python = ">=3.13"
keywords = ["ics", "calendar", "llm", "ai", "text-processing", "streamlit"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Scheduling",
    "Topic :: Text Processing",
    "Environment :: Console",
    "Environment :: Web Environment",
]
dependencies = [
    "icalendar>=6.3.1",
    "litellm>=1.74.0",
    "promptic>=5.5.1",
    "python-dotenv>=1.1.1",
    "tenacity>=9.1.2",
    "typer>=0.16.0",
]

[project.optional-dependencies]
st = [
    "authlib>=1.6.1",
    "qrcode>=8.2",
    "streamlit>=1.47.1",
    "streamlit-calendar>=1.4.0",
]

[dependency-groups]
dev = [
    "ipython>=9.4.0",
    "poethepoet>=0.36.0",
    "pre-commit>=4.2.0",
    "pyright>=1.1.403",
    "pytest>=8.4.1",
    "pytest-datadir>=1.8.0",
    "ruff>=0.12.7",
]

[project.scripts]
# running `text2ics` will run the `text2ics.cli:app` function
text2ics = "text2ics.cli:app"

[project.urls]
Homepage = "https://github.com/jakob1379/text2ics"
Repository = "https://github.com/jakob1379/text2ics"
"Bug Tracker" = "https://github.com/jakob1379/text2ics/issues"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.poe.tasks]
# run with eg `uv run poe fmt`
fmt = { cmd = "ruff format", help = "Formats the code using Ruff." }
lint = { cmd = "ruff check --fix", help = "Checks the code for linting issues and fixes them using Ruff." }
check = { cmd = "pyright", help = "Performs type checking using Pyright." }
test = { cmd = "pytest", help = "Runs the test suite using Pytest." }

# run all the above
all = { sequence = ["fmt", "lint", "check", "test"], help = "Runs all tasks: fmt, lint, check, and test." }

# ci
"ci:fmt" = { cmd = "ruff format --check", help = "Checks if the code is properly formatted using Ruff." }
"ci:lint" = { cmd = "ruff check", help = "Checks the code for linting issues without fixing them." }

# local dev
app = { cmd = "uv run --extra st streamlit run app/app.py --server.runOnSave true", help = "Runs the Streamlit app with live reload enabled." }

[tool.uv]
package = true

[tool.ruff]
target-version = "py313"
line-length = 100

[tool.ruff.lint]
# you can see the looong list of rules here:
# https://docs.astral.sh/ruff/rules/
# here's a couple to start with
select = [
    "A",    # warn about shadowing built-ins
    "E",    # style stuff, whitespaces
    "F",    # important pyflakes lints
    "I",    # import sorting
    "N",    # naming
    "T100", # breakpoints (probably don't want these in prod!)
]
# select = ["ALL"]
# manually ignore annoying ones:
# ignore = [...]

[tool.ruff.lint.isort]
# so it knows to group first-party stuff last
known-first-party = ["text2ics"]

[tool.ruff.lint.per-file-ignores]
"text2ics/system_prompt.py" = ["E501"]
"app/style.py" = ["E501"]

[tool.pyright]
venvPath = "."          # uv installs the venv in the current dir
venv = ".venv"          #       in a folder called `.venv`
strict = ["**/*.py"]    # use 'strict' checking on all files
pythonVersion = "3.13"  # if library, specify the _lowest_ you support

[tool.pytest.ini_options]
addopts = "--doctest-modules"
